# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- none

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'service-connection-acr'
  aksServiceConnection: 'service-connection-aks'
  imageRepository: 'app1nginxaks'
  containerRegistry: 'demotf001acr552.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/19-Azure-DevOps-with-AKS/19-02-Azure-DevOps-Deploy-to-AKS/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'acrdemo2ss-secret'


stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      name: Default
      demands: Agent.OS -equals Linux
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        buildContext: $(Build.SourcesDirectory)/19-Azure-DevOps-with-AKS/
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    
    - task: CopyFiles@2
      displayName: 'Copie Fichiers kube-manifests'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/19-Azure-DevOps-with-AKS/19-02-Azure-DevOps-Deploy-to-AKS/kube-manifests'
        CleanTargetFoler: true
        TargetFolder: '$(Build.StagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: kube-manifests'
      inputs:
        PathtoPublish: '$(Build.StagingDirectory)'
        ArtifactName: kube-manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      name: Default
      demands: Agent.OS -equals Linux
    environment: 'integration'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              kubernetesServiceConnection: $(aksServiceConnection)
              namespace: 'default'
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              kubernetesServiceConnection: $(aksServiceConnection)
              namespace: 'default'
              manifests: |
                $(Pipeline.Workspace)/kube-manifests/02-Deployment-and-LoadBalancer-Service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

